// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VSExtensionManager.Models;

namespace server.Migrations
{
    [DbContext(typeof(VSExtensionManagerContext))]
    partial class VSExtensionManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VSExtensionManager.Models.Blob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentLength");

                    b.Property<byte[]>("Data");

                    b.Property<string>("Filename");

                    b.Property<string>("MimeType");

                    b.HasKey("Id");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("VSExtensionManager.Models.Extension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ExtensionListId");

                    b.Property<string>("Name");

                    b.Property<string>("VsixId");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionListId");

                    b.ToTable("Extension");
                });

            modelBuilder.Entity("VSExtensionManager.Models.ExtensionList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PackageIdentifier");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("ExtensionList");
                });

            modelBuilder.Entity("VSExtensionManager.Models.Gallery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.HasKey("Id");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("VSExtensionManager.Models.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<long>("ContentId");

                    b.Property<DateTime>("DatePublished");

                    b.Property<string>("Description");

                    b.Property<long?>("ExtensionListId");

                    b.Property<long>("GalleryId");

                    b.Property<string>("GettingStartedUrl");

                    b.Property<long>("IconId");

                    b.Property<bool>("Included");

                    b.Property<string>("IssueTracker");

                    b.Property<string>("License");

                    b.Property<string>("MoreInfoUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PackageIdentifier");

                    b.Property<string>("Preview");

                    b.Property<string>("ReleaseNotesUrl");

                    b.Property<string>("Repo");

                    b.Property<string>("Tags");

                    b.Property<string>("Version");

                    b.Property<string>("_supportedVersionsString")
                        .HasColumnName("SupportedVersions");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ExtensionListId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("IconId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("VSExtensionManager.Models.Extension", b =>
                {
                    b.HasOne("VSExtensionManager.Models.ExtensionList")
                        .WithMany("Extensions")
                        .HasForeignKey("ExtensionListId");
                });

            modelBuilder.Entity("VSExtensionManager.Models.Package", b =>
                {
                    b.HasOne("VSExtensionManager.Models.Blob", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSExtensionManager.Models.ExtensionList", "ExtensionList")
                        .WithMany()
                        .HasForeignKey("ExtensionListId");

                    b.HasOne("VSExtensionManager.Models.Gallery", "Gallery")
                        .WithMany("Packages")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSExtensionManager.Models.Blob", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
